/*Учитывая, что массив целых чисел nums отсортирован в неубывающем порядке, удалите дубликаты на месте таким образом, чтобы каждый уникальный элемент появлялся только один раз. Относительный порядок элементов должен быть таким же. Затем верните количество уникальных элементов в nums.

        Учтите, сколько уникальных элементов nums должно быть k, чтобы их приняли, вам нужно выполнить следующие действия:

        Измените массив nums таким образом, чтобы первые k элементы nums содержали уникальные элементы в том порядке, в котором они присутствовали nums изначально. Остальные элементы nums не важны так же, как и размер nums.
        Возвратk.
        Пользовательская оценка:

        Судья протестирует ваше решение с помощью следующего кода:

        int[] nums = [...]; // Входной массив
        int[] expectedNums = [...]; // Ожидаемый ответ правильной длины

        int k = removeDuplicates(nums); // Вызывает вашу реализацию

        assert k == expectedNums.length;
        for (int i = 0; i < k; i++) {
        утверждать числа [i] == Ожидаемые числа [i];
        }
        Если все утверждения пройдут, то ваше решение будет принято.



        Пример 1:

        Входные данные: nums = [1,1,2]
        Вывод: 2, nums = [1,2,_]
        Объяснение: Ваша функция должна возвращать k = 2, причем первые два элемента nums равны 1 и 2 соответственно.
        Не имеет значения, что вы оставляете за пределами возвращаемого k (следовательно, они являются символами подчеркивания).
        Пример 2:

        Входные данные: nums = [0,0,1,1,1,2,2,3,3,4]
        Вывод: 5, nums = [0,1,2,3,4,_,_,_,_,_]
        Объяснение: Ваша функция должна возвращать k = 5, причем первые пять элементов nums равны 0, 1, 2, 3 и 4 соответственно.
        Не имеет значения, что вы оставляете за пределами возвращаемого k (следовательно, они являются символами подчеркивания).


        Ограничения:

        1 <= nums.length <= 3 * 104
        -100 <= nums[i] <= 100
        nums сортируется в неубывающем порядке.*/

package tasks;

import java.util.*;

public class RemoveDuplicatesFromSortedArray__26 implements Task{
    @Override
    public String execute(Map params) {
        return String.valueOf(removeDuplicates((int[]) params.get("value")));
    }

    public int removeDuplicates(int[] nums) {
        /*Set<Integer> numSet = new HashSet<>();
        Arrays.stream(nums).forEach(numSet::add);

        return numSet.size();*/

        if (nums.length == 0 )
            return 0;

        int index = 1;

        for (int i = 1; i<nums.length;i++){
            if(nums[i] != nums[index-1]){
                nums[index] = nums[i];
                index++;
            }
        }

        return index;
    }
}
